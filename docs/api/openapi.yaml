openapi: 3.0.3
info:
  title: Clearshore API
  description: |
    The Clearshore API provides comprehensive endpoints for user management, 
    data processing, and webhook integration. This API follows REST principles 
    and returns JSON responses with standard HTTP status codes.
  version: 1.2.3
  contact:
    name: Clearshore API Support
    email: support@clearshore.com
    url: https://clearshore.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.clearshore.com/v1
    description: Production server
  - url: https://staging-api.clearshore.com/v1
    description: Staging server
tags:
  - name: Health
    description: Health check and system status
  - name: Users
    description: User management operations
  - name: Data
    description: Data processing and file management
  - name: Webhooks
    description: Webhook management and events
paths:
  /health:
    get:
      tags:
        - Health
      summary: Health Check
      description: Check the status of the API and its dependencies
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    get:
      tags:
        - Users
      summary: List Users
      description: Retrieve a paginated list of users
      operationId: listUsers
      security:
        - ApiKeyAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            type: string
            enum: [user, admin, moderator]
        - name: status
          in: query
          description: Filter by user status
          required: false
          schema:
            type: string
            enum: [active, inactive, suspended]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Users
      summary: Create User
      description: Create a new user account
      operationId: createUser
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get User
      description: Retrieve a specific user by ID
      operationId: getUser
      security:
        - ApiKeyAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Users
      summary: Update User
      description: Update an existing user
      operationId: updateUser
      security:
        - ApiKeyAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Users
      summary: Delete User
      description: Delete a user account
      operationId: deleteUser
      security:
        - ApiKeyAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier for the user
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /data/upload:
    post:
      tags:
        - Data
      summary: Upload Data
      description: Upload a data file for processing
      operationId: uploadData
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The data file to upload
                type:
                  type: string
                  enum: [csv, json, xml, excel]
                  description: Data type
                name:
                  type: string
                  description: Custom name for the dataset
                description:
                  type: string
                  description: Description of the data
              required:
                - file
                - type
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFile'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /data/{data_id}/process:
    post:
      tags:
        - Data
      summary: Process Data
      description: Initiate processing of an uploaded data file
      operationId: processData
      security:
        - ApiKeyAuth: []
      parameters:
        - name: data_id
          in: path
          required: true
          description: Unique identifier for the data file
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessDataRequest'
      responses:
        '202':
          description: Processing initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingJob'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Data file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /webhooks:
    get:
      tags:
        - Webhooks
      summary: List Webhooks
      description: Retrieve a list of webhook endpoints
      operationId: listWebhooks
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Webhooks
      summary: Create Webhook
      description: Create a new webhook endpoint
      operationId: createWebhook
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Webhook created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key for authentication
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        services:
          type: object
          properties:
            database:
              type: string
              enum: [healthy, degraded, unhealthy]
            cache:
              type: string
              enum: [healthy, degraded, unhealthy]
            queue:
              type: string
              enum: [healthy, degraded, unhealthy]
        uptime:
          type: integer
          description: Service uptime in seconds
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin, moderator]
        status:
          type: string
          enum: [active, inactive, suspended]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin, moderator]
          default: user
        metadata:
          type: object
          additionalProperties: true
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
          enum: [user, admin, moderator]
        status:
          type: string
          enum: [active, inactive, suspended]
        metadata:
          type: object
          additionalProperties: true
    UserListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'
    DataFile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [csv, json, xml, excel]
        size:
          type: integer
        status:
          type: string
          enum: [uploaded, processing, processed, failed]
        created_at:
          type: string
          format: date-time
        processing:
          type: object
          properties:
            status:
              type: string
              enum: [pending, processing, completed, failed]
            estimated_completion:
              type: string
              format: date-time
    ProcessDataRequest:
      type: object
      required:
        - operations
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/ProcessingOperation'
        output_format:
          type: string
          enum: [json, csv, excel]
          default: json
    ProcessingOperation:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [clean, transform, aggregate, filter, validate]
        parameters:
          type: object
          additionalProperties: true
    ProcessingJob:
      type: object
      properties:
        job_id:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        estimated_completion:
          type: string
          format: date-time
        progress:
          type: integer
          minimum: 0
          maximum: 100
    Webhook:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
        secret:
          type: string
        status:
          type: string
          enum: [active, inactive]
        created_at:
          type: string
          format: date-time
        last_delivery:
          type: string
          format: date-time
    CreateWebhookRequest:
      type: object
      required:
        - url
        - events
      properties:
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
        secret:
          type: string
        description:
          type: string
    WebhookListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
